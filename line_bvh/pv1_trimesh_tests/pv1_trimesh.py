from numpy import *



# ANNOYINGLY CLOSE TO WORKING
# LIGHT B IS WEIRDING OUT THO!?
# SOMEHOW A LINE HAS GONE PAST THE ORIGIN


def cross(a, b):
    return a[0] * b[1] - a[1] * b[0]


def ray_line_intersection_ro0(rd, a, dpt):
    """Calculate the ray line intersection where Ro=(0, 0).

    Args:
        rd (array[float]): Ray direction
        a (array[float]): Line point A
        dpt (array[float]): B - A

    Returns:
        float: Intersection interval (t) : (a + dpt * t) = intersection point.
               (only valid if 0 <= t <= 1)
    """
    # https://www.geogebra.org/calculator/dug27m5r
    denom = dpt[0] * rd[1] - dpt[1] * rd[0] # cross(B - A, rd)

    if denom != 0:
        denom = 1.0 / denom
        t = cross(dpt, a) * denom
        if t >= 0:
            return cross(rd, a) * denom
    # if denom > 0:
    #     # cross(rd, a) / denom
    #     return (rd[0] * a[1] - rd[1] * a[0]) / denom
    return -1


def ray_line_intersection(rd, a, dpt):
    """Calculate the ray line intersection where Ro=Rd.

    Args:
        rd (array[float]): Ray direction
        a (array[float]): Line point A
        dpt (array[float]): B - A

    Returns:
        float: Intersection interval (t) : (a + dpt * t) = intersection point.
               (only valid if 0 <= t <= 1)
    """
    return ray_line_intersection_ro0(rd, a - rd, dpt)


def line_line_intersection(a, ba, c, dc, handle_parallel=False):
    """Calculate the intersection between two lines.

    Args:
        a (array[float]): Line point A
        ba (array[float]): B - A
        c (array[float]): Line point C
        dc (array[float]): D - C
        handle_parallel (bool): Handle parallel overlaps (Default: False).

    Returns:
        float: Intersection interval (t) : (a + ba * t) = intersection point.
               (only valid if 0 <= t <= 1)
    """
    # https://www.geogebra.org/calculator/ytnhzgzb
    ac = a - c
    d = cross(dc, ba)

    # Handle the hopefully rare parallel case where they may overlap
    if (d == 0) and handle_parallel:
        # This is basically construcing an inverse matrix from ba,
        # and checking if the intervals overlap.
        # First test if the CD is on the same plane as AB
        norm = 1.0 / dot(ba, ba)
        r0 = array((ba[1], ba[0])) * norm
        ix = dot(c - a, r0)
        if abs(ix) > 1e-7:
            return -1

        # Compute their intevals
        r1 = array((-r0[1], r0[0]))
        i0 = dot(c - a, r1)
        i1 = dot(c - a + dc, r1)

        tmin = min(i0, i1)
        tmax = max(i0, i1)

        if (tmax < 0) or (tmin > 1):
            return -1
        # Interval chosen will be closest to A
        return tmin

    sign_d = sign(d)
    u = cross(ac, ba) * sign_d
    t = cross(ac, dc) * sign_d
    if (min(u, t) > 0) and (max(u, t) <= abs(d)):
        return t / abs(d)
    return -1


def ccw_weight(dab, dcb):
    numerator = dab[0] * dcb[1] - dab[1] * dcb[0]
    denom = dot(dab, dcb)
    return pi - arctan2(-numerator, -denom)


def colinear_rays(a, b):
  """Check if two rays are approximately colinear.

  Args:
    a (array[float]): First ray direction
    b (array[float]): Second ray direction

  Returns:
    bool: True if colinear.
  """
  return (dot(a, b)) > 0 and (abs(cross(a, b)) <= 1e-5)



r"""

Graph Based Polygon Subtraction


We start with a base polygon which represents the current visibility span,
orientated clockwise:

 A---------------------------->B
  ^                           /
   \                         /
    \                       /
     \                     /
      \                   /
       \                 /
        \               /
         \             /
          \           /
           \         /
            \       /
             \     /
              \   /
               \ v
                C


We then project the line and calculate intersection points:


 A-----------------X---------->B
  ^               /           /
   \             /           /
    \           L0          /
     \            \        /
      \           L1------X
       \                 /
        \               /
         \             /
          \           /
           \         /
            \       /
             \     /
              \   /
               \ v
                C


We then follow the graph, proceeding in the most clockwise direction, until
# we hit a previously seen point.

 A---------------->B
  ^               /
   \             V
    \            C
     \            \
      \            D----->E
       \                 /
        \               /
         \             /
          \           /
           \         /
            \       /
             \     /
              \   /
               \ v
                F
"""

# There can only reasonably be an even number of intersections?
# If RayA and RayB could only ever intesect once.


class Vertex(object):

  def __init__(self, pos):
    self.pos = pos
    self.child = None

  def swap_child(self, new_child):
    old_child = self.child
    self.child = new_child
    return old_child



class VisibilityPolygon(object):

    def __init__(self, triangle_scale=2):
        # Init with a triangle
        a = Vertex(array((-3.0 * triangle_scale, 0.0 * triangle_scale)))
        b = Vertex(array((1.0 * triangle_scale, 2.0 * triangle_scale)))
        c = Vertex(array((1.0 * triangle_scale, -2.0 * triangle_scale)))            
        a.child = b
        b.child = c
        c.child = a
        self.head = a

    def get_vertices(self):
        it = self.head
        while True:
            yield it
            it = it.child
            if it == self.head:
                break


    def add_line(self, line):
        x0, y0, x1, y1 = line

        # Ensure clockwise orientation
        if (x1 * y0 - x0 * y1) < 0:
            x0, y0, x1, y1 = x1, y1, x0, y0

        a = array((x0, y0))
        b = array((x1, y1))

        if colinear_rays(a, b):
            return

        dba = b - a

        # First the first edge that does NOT intersect with RayA
        start_vertex = self.head
        while True:
            pta = start_vertex.pos
            dpt = start_vertex.child.pos - pta
            intersect_a = ray_line_intersection_ro0(a, pta, dpt)
            if intersect_a < 0 or intersect_a > 1:
                break
            start_vertex = start_vertex.child
            if start_vertex == self.head:
                # Not totally sure this is possible under regular circumstances
                raise RuntimeError("How did this happen?")
                return

        # Find the first edge that starts before A and ends after A
        head_pivot = start_vertex
        while True:
            pta = start_vertex.pos
            dpt = start_vertex.child.pos - pta
            intersect_a = ray_line_intersection_ro0(a, pta, dpt)
            if intersect_a >= 0 and intersect_a <= (1 + 1e-9):
                break
            start_vertex = start_vertex.child
            if start_vertex == head_pivot:
                # Not totally sure this is possible under regular circumstances
                # raise RuntimeError("How did this happen?")
                return

        # Find the first edge that starts before B and ends after B
        end_vertex = start_vertex
        while True:
            pta = end_vertex.pos
            dpt = end_vertex.child.pos - pta
            intersect_b = ray_line_intersection_ro0(b, pta, dpt)
            if intersect_b >= 0 and intersect_b <= (1 + 1e-9):
                break
            end_vertex = end_vertex.child
            if end_vertex == start_vertex:
                # Not totally sure this is possible under regular circumstances
                # raise RuntimeError("How did this happen?")
                return

        should_insert = False
        inside_polygon = False
        insertion_points = []

        # RayA intersection
        pta = start_vertex.pos
        dpt = start_vertex.child.pos - pta
        intersect_a = ray_line_intersection(a, pta, dpt)
        if intersect_a > 0 and intersect_a <= (1 + 1e-9):
            inside_polygon = True
            should_insert = True
            insertion_points.append(pta + dpt * intersect_a)
            insertion_points.append(a)
        # else:
        #     start_vertex = start_vertex.child

        # A->B intersections
        it = start_vertex
        while True:
            if not inside_polygon:
                insertion_points.append(it.pos)
            pta = it.pos
            dpt = it.child.pos - pta
            t = line_line_intersection(a, dba, pta, dpt)
            if t > 0 and t <= (1 + 1e-9):
                should_insert = True
                pos = a + dba * t
                insertion_points.append(pos)
                inside_polygon = not inside_polygon
            it = it.child
            if it == end_vertex.child:
                break

        # RayB intersection
        pta = end_vertex.pos
        dpt = end_vertex.child.pos - pta
        intersect_b = ray_line_intersection(b, pta, dpt)

        if intersect_b > 0 and intersect_b <= (1 + 1e-9):
            should_insert = True
            insertion_points.append(b)
            insertion_points.append(pta + dpt * intersect_b)

        if should_insert:
            self.head = start_vertex
            input_point = start_vertex
            output_point = end_vertex.child
            it = input_point
            for pos in insertion_points:
                vertex = Vertex(pos)
                it.child = vertex
                it = vertex
            it.child = output_point

            # Cleanup degenerates (ADD THIS AS A FINAL PASS?)
            it = self.head
            while it.child != self.head:
                d = it.pos - it.child.pos
                if sqrt(dot(d, d)) < 1e-7:
                    it.child = it.child.child
                it = it.child

            it = self.head
            while it.child.child != self.head:
                d = it.pos - it.child.child.pos
                if sqrt(dot(d, d)) < 1e-7:
                    it.child = it.child.child.child
                it = it.child



lines_data = (array([
    -0.8, 0.8, -0.8, 0.6,
    -0.8, 0.6, -0.8, 0.4,
    -0.8, 0.4, -0.6, 0.2,
    -0.6, 0.6, -0.6, 0.4,
    -0.6, 0.4, -0.4, 0.2,
    -0.6, 0.4, -0.4550845979179728, 0.4041195074892856,
    -0.4, 0.6, -0.4550845979179728, 0.4041195074892856,
    -0.6, 0.8, -0.3523147896531834, 0.7417917346450221,
    -0.3523147896531834, 0.7417917346450221, -0.16512692459945985, 0.8372208423194695,
    -0.16512692459945985, 0.8372208423194695, 0.11014934753836887, 0.8372208423194695,
    -0.6, 0.8, -0.6000000000000001, 1.0,
    -0.8, 0.8, -0.8, 1.0,
    -0.6, 0.2, -0.6899870168089199, 0.07378798092389112,
    -0.6899870168089199, 0.07378798092389112, -0.8, 0.2,
    -0.8, 0.2, -0.887746417933024, 0.35356291088806213,
    -0.887746417933024, 0.35356291088806213, -0.880247239549394, 0.9309996464275795,
    -0.880247239549394, 0.9309996464275795, -0.930241762106928, 0.9459980031948397,
    -0.930241762106928, 0.9459980031948397, -0.9477398450020649, 0.34856345863230875,
    -0.9477398450020649, 0.34856345863230875, -0.9252423098511745, 0.17608235580881654,
    -0.9252423098511745, 0.17608235580881654, -0.7552609331555589, 0.00860070524107772,
    -0.7552609331555589, 0.00860070524107772, -0.83775189537549, -0.12138505340851061,
    -0.83775189537549, -0.12138505340851061, -0.8227535386082299, -0.491344520334262,
    -0.8227535386082299, -0.491344520334262, -0.9269466685747265, -0.5956512742156619,
    -0.9269466685747265, -0.5956512742156619, -0.9201292336805172, -0.6910953627345904,
    -0.9201292336805172, -0.6910953627345904, -0.797415405584752, -0.5592916214465462,
    -0.797415405584752, -0.5592916214465462, -0.6474318379121501, -0.7365449286959849,
    0.5434601240897526, 0.16422840418542378, 0.5456683846785265, 0.3320562089322359,
    -0.6474318379121501, -0.7365449286959849, -0.8, -0.8,
    -0.8, -0.8, -0.9396871437734609, -0.9341363891990299,
    -0.9396871437734609, -0.9341363891990299, -0.8434533432399988, -0.9549436974224811,
    -0.8434533432399988, -0.9549436974224811, -0.7628250238741252, -0.8483062427772933,
    -0.7628250238741252, -0.8483062427772933, -0.6, -0.8,
    -0.6, -0.8, -0.45591722757821923, -0.8769162915845389,
    -0.45591722757821923, -0.8769162915845389, -0.1047939013074794, -0.8743153780566074,
    -0.1047939013074794, -0.8743153780566074, -0.12039938247506783, -0.9367373027269612,
    -0.12039938247506783, -0.9367373027269612, -0.026766495469537206, -0.9653473515342067,
    -0.026766495469537206, -0.9653473515342067, 0.0, -0.8795172051124702,
    0.0, -0.8795172051124702, -0.05797745780471408, -0.7546733557717626,
    -0.05797745780471408, -0.7546733557717626, -0.4273071787709738, -0.7702788369393511,
    -0.4273071787709738, -0.7702788369393511, -0.627577520421692, -0.5804121494003581,
    -0.627577520421692, -0.5804121494003581, -0.37268799468441427, -0.43736190536413067,
    -0.37268799468441427, -0.43736190536413067, -0.2244359235923241, -0.46597195417137616,
    -0.2244359235923241, -0.46597195417137616, -0.3830916487961399, -0.5622057547048382,
    -0.3830916487961399, -0.5622057547048382, -0.3752889082123457, -0.6506368146545062,
    -0.3752889082123457, -0.6506368146545062, -0.3102660700140605, -0.6714441228779575,
    -0.3102660700140605, -0.6714441228779575, -0.30246332943026627, -0.5856139764562209,
    -0.30246332943026627, -0.5856139764562209, -0.011161014301948767, -0.4789765218110332,
    -0.011161014301948767, -0.4789765218110332, 0.0, -0.4,
    0.0, -0.4, -0.3440779458771688, -0.31771988307928584,
    -0.3440779458771688, -0.31771988307928584, -0.6613893962848003, -0.48938017592275884,
    -0.6613893962848003, -0.48938017592275884, -0.6899994450920458, -0.12265136848443012,
    -0.6899994450920458, -0.12265136848443012, -0.5235409793044358, 0.13743998430871082,
    -0.5235409793044358, 0.13743998430871082, -0.3960962164357969, 0.03340344319145445,
    -0.3960962164357969, 0.03340344319145445, -0.5729583363351325, -0.1486605037637442,
    -0.5729583363351325, -0.1486605037637442, -0.5651555957513383, -0.2839080072161775,
    -0.5651555957513383, -0.2839080072161775, -0.48972910344132753, -0.29691257485583455,
    -0.48972910344132753, -0.29691257485583455, -0.4689217952178763, -0.16426598493133265,
    -0.4689217952178763, -0.16426598493133265, -0.3180688105978547, -0.013413000311310921,
    -0.3180688105978547, -0.013413000311310921, -0.09178933366782237, -0.1746696390430583,
    -0.09178933366782237, -0.1746696390430583, -0.17761948008955877, -0.2344906501854807,
    -0.17761948008955877, -0.2344906501854807, -0.021564668413674392, -0.35153175894239413,
    -0.021564668413674392, -0.35153175894239413, 0.08507278623151326, -0.3411281048306685,
    0.08507278623151326, -0.3411281048306685, -0.01636284135781158, -0.2500961313530692,
    -0.01636284135781158, -0.2500961313530692, 0.09547644034323889, -0.1746696390430583,
    0.09547644034323889, -0.1746696390430583, 0.10848100798289592, -0.04462396264648783,
    0.10848100798289592, -0.04462396264648783, -0.20622952889680424, 0.06981623258249418,
    -0.20622952889680424, 0.06981623258249418, 0.04605908331254217, 0.17125186017181915,
    0.04605908331254217, 0.17125186017181915, 0.19171024087670094, 0.11143084902939673,
    0.19171024087670094, 0.11143084902939673, 0.27754038729843733, -0.12265136848443012,
    0.27754038729843733, -0.12265136848443012, 0.19691206793256374, -0.3437290183585999,
    0.19691206793256374, -0.3437290183585999, 0.2203202896839464, -0.6376322470148492,
    0.2203202896839464, -0.6376322470148492, 0.1396919703180728, -0.7286642204924485,
    0.1396919703180728, -0.7286642204924485, 0.13709105679014139, -0.8977235998079901,
    0.39458149605535064, -0.9185309080314413, 0.13709105679014139, -0.8977235998079901,
    0.39458149605535064, -0.9185309080314413, 0.6962874652953938, -0.858709896889019,
    0.6962874652953938, -0.858709896889019, 0.8445395363874839, -0.7104578257969286,
    0.8445395363874839, -0.7104578257969286, 0.8393377093316211, -0.5205911382579358,
    0.8393377093316211, -0.5205911382579358, 0.7222966005747078, -0.4529673865317191,
    0.7222966005747078, -0.4529673865317191, 0.4, -0.6,
    0.4, -0.6, 0.3035495225777514, -0.32812353719101145,
    0.3035495225777514, -0.32812353719101145, 0.4335951989743217, -0.1460595902358128,
    0.4335951989743217, -0.1460595902358128, 0.4335951989743217, 0.04640801083111149,
    0.5434601240897526, 0.16422840418542378, 0.4335951989743217, 0.04640801083111149,
    0.537631740091578, -0.6636413822941633, 0.5350308265636465, -0.7364669610762428,
    0.5350308265636465, -0.7364669610762428, 0.6156591459295202, -0.7494715287158997,
    0.6156591459295202, -0.7494715287158997, 0.6286637135691772, -0.6532377281824376,
    0.6286637135691772, -0.6532377281824376, 0.537631740091578, -0.6636413822941633,
    -0.4, 0.2, -0.26084871298336376, 0.22066921720251592,
    -0.26084871298336376, 0.22066921720251592, -0.26605054003922657, 0.4417468670766857,
    -0.26605054003922657, 0.4417468670766857, -0.4, 0.6,
    -0.27905510767888364, 0.6628245169508555, -0.16201399892197033, 0.5145724458587652,
    -0.16201399892197033, 0.5145724458587652, -0.13860577717058767, 0.28309114187286977,
    -0.13860577717058767, 0.28309114187286977, 0.0, 0.2986966230404582,
    0.0, 0.2986966230404582, 0.06946730506392483, 0.44694869413254856,
    0.06946730506392483, 0.44694869413254856, -0.01636284135781158, 0.5613888893615305,
    -0.01636284135781158, 0.5613888893615305, -0.27905510767888364, 0.6628245169508555,
    -0.1464085177543819, 0.7174437010374151, 0.0, 0.6732281710625811,
    0.0, 0.6732281710625811, 0.13449014326220998, 0.6940354792860324,
    -0.1464085177543819, 0.7174437010374151, -0.047573803692988456, 0.7564574039563863,
    -0.047573803692988456, 0.7564574039563863, 0.37117327430396796, 0.7616592310122491,
    0.37117327430396796, 0.7616592310122491, 0.5922509241781375, 0.8891039938808881,
    0.5922509241781375, 0.8891039938808881, 0.5558381347870978, 0.9463240914953791,
    0.5558381347870978, 0.9463240914953791, 0.4205906313346647, 0.9541268320791734,
    0.4205906313346647, 0.9541268320791734, 0.29574678199395715, 0.8708975991853682,
    0.29574678199395715, 0.8708975991853682, 0.11014934753836887, 0.8372208423194695,
    0.13449014326220998, 0.6940354792860324, 0.6, 0.6,
    0.6, 0.6, 0.7274984276305706, 0.7252464416212093,
    0.7274984276305706, 0.7252464416212093, 0.8809523257785236, 0.7070400469256894,
    0.8809523257785236, 0.7070400469256894, 0.9485760775047402, 0.4365450400208229,
    0.9485760775047402, 0.4365450400208229, 0.8653468446109351, 0.31430210420804666,
    0.8653468446109351, 0.31430210420804666, 0.909562374585769, 0.14784363842043646,
    0.909562374585769, 0.14784363842043646, 0.8757504987226608, -0.23969247724134354,
    0.8757504987226608, -0.23969247724134354, 0.774314871133336, -0.32812353719101145,
    0.774314871133336, -0.32812353719101145, 0.6702783300160797, -0.33072445071894285,
    0.6702783300160797, -0.33072445071894285, 0.6260628000412458, -0.29431166132790315,
    0.6260628000412458, -0.29431166132790315, 0.7066911194071194, -0.23969247724134354,
    0.7066911194071194, -0.23969247724134354, 0.7665121305495417, -0.1486605037637442,
    0.7665121305495417, -0.1486605037637442, 0.7535075629098847, 0.11403176255732814,
    0.7535075629098847, 0.11403176255732814, 0.6676774164881483, 0.2622838336494185,
    0.6676774164881483, 0.2622838336494185, 0.6546728488484913, 0.07241714611042559,
    0.6546728488484913, 0.07241714611042559, 0.704090205879188, -0.07843583850959615,
    0.704090205879188, -0.07843583850959615, 0.6988883788233251, -0.1694678119871955,
    0.563640875370892, -0.20327968785030381, 0.6988883788233251, -0.1694678119871955,
    0.563640875370892, -0.20327968785030381, 0.511622604812264, -0.1200504549564987,
    0.511622604812264, -0.1200504549564987, 0.5194253453960581, -0.026417567950967967,
    0.5194253453960581, -0.026417567950967967, 0.5684412929393573, 0.03552596459056943,
    0.5684412929393573, 0.03552596459056943, 0.6, 0.2,
    0.6, 0.2, 0.5456683846785265, 0.3320562089322359,
    0.7092095515335306, 0.5854019747240594, 0.8, 0.6,
    0.8, 0.6, 0.845578802046636, 0.5282148696701765,
    0.845578802046636, 0.5282148696701765, 0.8015887212359569, 0.4490327242109539,
    0.8015887212359569, 0.4490327242109539, 0.7092095515335306, 0.5854019747240594,
    0.29350328787261243, 0.46882826057575955, 0.2957027919131464, 0.4358356999677501,
    0.2957027919131464, 0.4358356999677501, 0.33529386464275773, 0.433636195927216,
    0.33529386464275773, 0.433636195927216, 0.3385147229981519, 0.4738969253696431,
    0.2957027919131464, 0.4358356999677501, 0.29350328787261243, 0.46882826057575955,
    0.3385147229981519, 0.4738969253696431, 0.29350328787261243, 0.46882826057575955,
    0.3007526633482028, 0.3773906350299966, 0.33785944567776255, 0.3690116841813863,
    0.33785944567776255, 0.3690116841813863, 0.34025343163450833, 0.2181905689064014,
    0.34025343163450833, 0.2181905689064014, 0.3139195861103046, 0.2134025969929098,
    0.3007526633482028, 0.3773906350299966, 0.3139195861103046, 0.2134025969929098,
    0.10683980085179354, 0.2840251827169107, 0.16668944977043837, 0.36542070524626763,
    0.16668944977043837, 0.36542070524626763, 0.20259923912162525, 0.3522537824841658,
    0.20259923912162525, 0.3522537824841658, 0.21217518294860843, 0.24093343549548643,
    0.21217518294860843, 0.24093343549548643, 0.17387140764067574, 0.23016049869013036,
    0.17387140764067574, 0.23016049869013036, 0.10683980085179354, 0.2840251827169107,
    0.443551169724851, 0.5370401714419458, 0.4820518845461652, 0.42328805946988135,
    0.4820518845461652, 0.42328805946988135, 0.5853038015669625, 0.41453789701049176,
    0.5853038015669625, 0.41453789701049176, 0.6343047113395442, 0.4792890992099746,
    0.6343047113395442, 0.4792890992099746, 0.443551169724851, 0.5370401714419458,
    0.1285453211868255, 0.614041601084574, 0.14079554862997093, 0.5492903988850911,
    0.14079554862997093, 0.5492903988850911, 0.22654714073198898, 0.5160397815394108,
    0.22654714073198898, 0.5160397815394108, 0.2562976930939136, 0.5772909187551378,
    0.2562976930939136, 0.5772909187551378, 0.1285453211868255, 0.614041601084574,
], dtype=float32)
    * 0.5 + 0.5
)
lines_data = lines_data.reshape((len(lines_data)//4, 4))
if __name__ == "__main__":
    p = VisibilityPolygon()
    # p.add_line(array((0.0, 0.4, 0.15, -0.05)))
    # p.add_line(array((0.3320395938842,0.2892271257039, 0.2115759855531,0.626525229031)))
    # p.add_line(array((-0.4760480959557,0.1311095656039, -0.3162727175992,0.7121109414457)))
    # p.add_line(array((-0.2916018517206,0.3199053271587, 0.1102143253821,0.2009405687849)))
    # p.add_line(array((-0.7731100796368,0.1230241779685, 0.2421012862217,0.3098906668697)))
    # p.add_line(array((0.1, 0.1, 0.15, -0.05)))

    for line in lines_data:
        # p.add_line(line - (0.125, 0.5, 0.125, 0.5))
        p.add_line(line - (0.4, 0.75, 0.4, 0.75))
        # p.add_line(line - (0.65, 0.5, 0.65, 0.5))

    print("{{{0}}}".format(
        ",".join(
            "vector(({0[0]:f},{0[1]:f}),({1[0]:f},{1[1]:f}))".format(v.pos, v.child.pos)
            # "vertex(({0},{1}))".format(v.pos, v.child.pos)
            for v in p.get_vertices()
        )
    ))

#ifndef LINE_BVH_V1_TRACING_GLSLI
#define LINE_BVH_V1_TRACING_GLSLI


// Should be like log2(num_lines) ? for maximum occupancy
#ifndef LINE_BVH_V1_STACK_SIZE
#define LINE_BVH_V1_STACK_SIZE 16
#endif // LINE_BVH_V1_STACK_SIZE

#ifndef LINE_BVH_V1_FORCE_FULL_TRAVERSAL
#define LINE_BVH_V1_FORCE_FULL_TRAVERSAL 0
#endif // LINE_BVH_V1_FORCE_FULL_TRAVERSAL



layout(binding=LINE_BVH_V1_LOC) uniform sampler1D v1LinesBvh;


#define LINE_BVH_V1_BBOX_TYPE 0
#define LINE_BVH_V1_LINE_TYPE 1

struct LineBvhV1Stack
{
    int index;
    int stack[LINE_BVH_V1_STACK_SIZE];
};


struct LineBvhV1Result
{
    uint    hitLineId;
    float   hitDistSq;
    vec4    line; // ptA = line.xy, ptB = line.xy - line.zw
    float   hitLineInterval;
    vec2    dUV; // ro + dUV = intersection point
    int     numNodesVisited;
    int     numLineIntersections;
};

struct FindNearestLineBvhV1Result
{
    uint    hitLineId;
    float   hitDistSq;
    vec4    line; // ptA = line.xy, ptB = line.xy - line.zw
    int     numNodesVisited;
    int     numLineIntersections;
};


bool lineBvhV1EvalEntry(vec2 ro,
                        vec2 invRd,
                        vec2 metadata,
                        vec4 data,
                        inout LineBvhV1Result result,
                        inout float dist,
                        inout int idx)
{
    // https://www.geogebra.org/calculator/ytnhzgzb
    if(floatBitsToInt(metadata).x == LINE_BVH_V1_LINE_TYPE)
    {
        ++result.numLineIntersections;

        vec2 A = ro;
        vec2 AB = -result.dUV;
        vec2 C = data.xy;
        vec2 CD = data.zw;
        vec2 AC = A - C;

        float d = AB.x * CD.y - AB.y * CD.x; // cross(AB, CD)
        float u = AC.x * AB.y - AC.y * AB.x; // cross(AC, AB)
        float v = AC.x * CD.y - AC.y * CD.x; // cross(AC, CD)

        uint dSign = floatBitsToUint(d) & 0x80000000u;
        u = uintBitsToFloat(floatBitsToUint(u) ^ dSign); // u *= sign(d);
        v = uintBitsToFloat(floatBitsToUint(v) ^ dSign); // v *= sign(d);

        if((min(u, v) > 0.0) && (max(u, v) < abs(d)))
        {
            result.hitLineId = floatBitsToUint(metadata.y);
            result.hitLineInterval = -u / abs(d);
            result.line = data;
            result.dUV *= v / abs(d);
            result.hitDistSq = dot(result.dUV, result.dUV);
        }

        return false;
    }

    // floatBitsToInt(metadata).x == LINE_BVH_V1_BBOX_TYPE
    // https://www.geogebra.org/calculator/gcmwgqhk
    {
        vec2 bboxMin = data.xy;
        vec2 bboxMax = data.zw;
        vec2 xintervals = (vec2(bboxMin.x, bboxMax.x) - ro.xx) * invRd.x;
        vec2 yintervals = (vec2(bboxMin.y, bboxMax.y) - ro.yy) * invRd.y;

        if(xintervals.x > xintervals.y) { xintervals.xy = xintervals.yx; }
        if(yintervals.x > yintervals.y) { yintervals.xy = yintervals.yx; }

        vec2 intervals = vec2(max(xintervals.x, yintervals.x), min(xintervals.y, yintervals.y));
        intervals.x = max(0, intervals.x);

#if !LINE_BVH_V1_FORCE_FULL_TRAVERSAL
        if((intervals.x < intervals.y) && ((intervals.x * intervals.x) < result.hitDistSq))
#endif // LINE_BVH_V1_FORCE_FULL_TRAVERSAL
        {
            dist = intervals.x;
            idx = floatBitsToInt(metadata.y);
            return true;
        }

        return false;
    }

}


LineBvhV1Result traceLineBvhV1(vec2 ro, vec2 rd, float maxDist, bool stopOnFirstHit)
{
    LineBvhV1Result result;
    result.hitLineId = 0xffffffffu;
    result.hitDistSq = maxDist * maxDist;
    result.dUV = rd * maxDist;
    result.numNodesVisited = 0;
    result.numLineIntersections = 0;

    LineBvhV1Stack stack;
    stack.index = 0;

    vec2 invRd = 1.0 / rd;
    bool done = false;
    int head = 0;

    while(!done)
    {
        result.numNodesVisited += 1;

        vec4 v0 = texelFetch(v1LinesBvh, head, 0);
        vec4 v1 = texelFetch(v1LinesBvh, head + 1, 0);
        vec4 v2 = texelFetch(v1LinesBvh, head + 2, 0);

        vec2 leftMeta = v0.xy;
        vec4 leftData = v1;

        vec2 addToStackDistances;
        ivec2 addToStackIds;

        bool leftAddToStack = lineBvhV1EvalEntry(ro,
                                                 invRd,
                                                 leftMeta,
                                                 leftData,
                                                 result,
                                                 addToStackDistances.x,
                                                 addToStackIds.x);

        vec2 rightMeta = v0.zw;
        vec4 rightData = v2;

        bool rightAddToStack = lineBvhV1EvalEntry(ro,
                                                  invRd,
                                                  rightMeta,
                                                  rightData,
                                                  result,
                                                  addToStackDistances.y,
                                                  addToStackIds.y);

        if(stopOnFirstHit && (result.hitLineId != 0xffffffffu))
        {
            break;
        }

        // Prioritise nearest
        if(leftAddToStack && rightAddToStack)
        {
            if(addToStackDistances.x < addToStackDistances.y)
            {
                addToStackDistances.xy = addToStackDistances.yx;
                addToStackIds.xy = addToStackIds.yx;
            }

            stack.stack[++stack.index] = addToStackIds.x;
            head = addToStackIds.y;
        }
        else if(leftAddToStack)
        {
            head = addToStackIds.x;

        }
        else if(rightAddToStack)
        {
            head = addToStackIds.y;
        }
        else if(stack.index > 0)
        {
            head = stack.stack[stack.index--];
        }
        else
        {
            done = true;
        }
    }

    return result;
}


bool findNearestLineBvhV1EvalEntry(vec2 ro,
                                   vec2 metadata,
                                   vec4 data,
                                   inout FindNearestLineBvhV1Result result,
                                   inout float dist,
                                   inout int idx)
{
    
    // https://www.geogebra.org/calculator/axmebcr6
    if(floatBitsToInt(metadata).x == LINE_BVH_V1_LINE_TYPE)
    {
        ++result.numLineIntersections;

        // https://www.geogebra.org/calculator/aajzrdep
        vec2 A = data.xy - ro;
        vec2 AB = data.zw;
        float t = max(0, min(1, dot(A, AB) / dot(AB, AB)));
        vec2 nearestPoint = A - AB * t;

        float nearestDistSq = dot(nearestPoint, nearestPoint);

        if(nearestDistSq < result.hitDistSq)
        {
            result.hitLineId = floatBitsToUint(metadata.y);
            result.line = data;
            result.hitDistSq = nearestDistSq;
        }

        return false;
    }

    // floatBitsToInt(metadata).x == LINE_BVH_V1_BBOX_TYPE
    {
        vec2 bboxMin = data.xy;
        vec2 bboxMax = data.zw;
        vec2 dxdy = max(vec2(0, 0), max(bboxMin - ro, ro - bboxMax));
        float distSqr = dot(dxdy, dxdy);
#if !LINE_BVH_V1_FORCE_FULL_TRAVERSAL
        if(distSqr < result.hitDistSq)
#endif // LINE_BVH_V1_FORCE_FULL_TRAVERSAL
        {
            dist = distSqr;
            idx = floatBitsToInt(metadata.y);
            return true;
        }

        return false;
    }
}


FindNearestLineBvhV1Result findNearestLineBvhV1(vec2 ro, float maxDist)
{
    FindNearestLineBvhV1Result result;
    result.hitLineId = 0xffffffffu;
    result.hitDistSq = maxDist * maxDist;
    result.numNodesVisited = 0;
    result.numLineIntersections = 0;

    LineBvhV1Stack stack;
    stack.index = 0;

    bool done = false;
    int head = 0;

    while(!done)
    {
        result.numNodesVisited += 1;

        vec4 v0 = texelFetch(v1LinesBvh, head, 0);
        vec4 v1 = texelFetch(v1LinesBvh, head + 1, 0);
        vec4 v2 = texelFetch(v1LinesBvh, head + 2, 0);

        vec2 leftMeta = v0.xy;
        vec4 leftData = v1;

        vec2 addToStackDistances;
        ivec2 addToStackIds;

        bool leftAddToStack = findNearestLineBvhV1EvalEntry(ro,
                                                            leftMeta,
                                                            leftData,
                                                            result,
                                                            addToStackDistances.x,
                                                            addToStackIds.x);

        vec2 rightMeta = v0.zw;
        vec4 rightData = v2;

        bool rightAddToStack = findNearestLineBvhV1EvalEntry(ro,
                                                             rightMeta,
                                                             rightData,
                                                             result,
                                                             addToStackDistances.y,
                                                             addToStackIds.y);

        // Prioritise nearest
        if(leftAddToStack && rightAddToStack)
        {
            if(addToStackDistances.x < addToStackDistances.y)
            {
                addToStackDistances.xy = addToStackDistances.yx;
                addToStackIds.xy = addToStackIds.yx;
            }

            stack.stack[++stack.index] = addToStackIds.x;
            head = addToStackIds.y;
        }
        else if(leftAddToStack)
        {
            head = addToStackIds.x;

        }
        else if(rightAddToStack)
        {
            head = addToStackIds.y;
        }
        else if(stack.index > 0)
        {
            head = stack.stack[stack.index--];
        }
        else
        {
            done = true;
        }
    }

    return result;
}


float findNearestDistanceBvhV1(vec2 ro, float maxDist)
{
    return sqrt(findNearestLineBvhV1(ro, maxDist).hitDistSq);
}


#endif // LINE_BVH_V1_TRACING_GLSLI

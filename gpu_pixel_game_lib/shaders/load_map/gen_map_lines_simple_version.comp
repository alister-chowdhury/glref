#version 460 core

#define GLOBAL_PARAMETERS_BINDING       0
#define MAP_ATLAS_BINDING               1
#include "../common.glsli"
#include "../bindings.glsli"
#include "../map_atlas_common.glsli"

#define THREAD_SIZE     MAX_LEVEL_DIM
#define INVALID_OFFSET  -0x7ffffff

layout(local_size_x=THREAD_SIZE) in;

writeonly layout(std430, binding = 2) buffer outNumLines_ { uint outNumLines; };
writeonly layout(std430, binding = 3) buffer outLines_ { vec4 outLines[]; };


shared uint lineAllocator[THREAD_SIZE];


bool sampleCoord(ivec2 localCoord, MapAtlasLevelInfo atlasInfo)
{
    if(localCoord.x < atlasInfo.size.x
        && localCoord.x >= 0
        && localCoord.y < atlasInfo.size.y
        && localCoord.y >= 0)
    {
        ivec2 coord = localCoord + ivec2(atlasInfo.offset);
        return hasAnySectors(imageLoad(mapAtlas, coord).x);
    }
    return false;
}


uint evaluateX(uint tid,
               uint offset,
               MapAtlasLevelInfo atlasInfo,
               bool dryRun)
{
    float invWidth = atlasInfo.inverseSize.x;
    float invHeight = atlasInfo.inverseSize.y;

    for(int y=int(tid); y < atlasInfo.size.y; y+=THREAD_SIZE)
    {
        float v = 0;
        int lineStart = INVALID_OFFSET;

        for(int x=0; x < atlasInfo.size.x; ++x)
        {
            bool downVisible = sampleCoord(ivec2(x, y-1), atlasInfo);
            bool middleVisible = sampleCoord(ivec2(x, y), atlasInfo);

            if(downVisible != middleVisible)
            {
                if(lineStart == INVALID_OFFSET)
                {
                    lineStart = x;

                    // Extend the end to handle wall segments
                    int yOffset = y;
                    if(downVisible)
                    {
                        ++yOffset;
                    }
                    v = float(yOffset) * invHeight;
                }
            }
            else if(lineStart != INVALID_OFFSET)
            {
                uint writeId = offset++;
                if(!dryRun)
                {
                    uint lineEnd = x;
                    outLines[writeId] = vec4(float(lineStart) * invWidth,
                                             v,
                                             float(lineEnd) * invWidth,
                                             v);
                }
                lineStart = INVALID_OFFSET;
            }
        }
    }

    return offset;
}


uint evaluateY(uint tid,
               uint offset,
               MapAtlasLevelInfo atlasInfo,
               bool dryRun)
{

    float invWidth = atlasInfo.inverseSize.x;
    float invHeight = atlasInfo.inverseSize.y;

    for(int x=int(tid); x < atlasInfo.size.x; x+=THREAD_SIZE)
    {
        float u = float(x) * invWidth;
        int lineStart = INVALID_OFFSET;
        
        for(int y=0; y < atlasInfo.size.y; ++y)
        {
            bool leftVisible = sampleCoord(ivec2(x-1, y), atlasInfo);
            bool middleVisible = sampleCoord(ivec2(x, y), atlasInfo);

            if(leftVisible != middleVisible)
            {
                if(lineStart == INVALID_OFFSET)
                {
                    lineStart = y;
                    
                    // This pushes up the blocking line
                    // to be above a visible wall segment
                    //
                    // TODO: This looks a bit weird, even when we do
                    // winding culling, so maybe we should keep a bit
                    // of the side visible.
                    bool downVisible = sampleCoord(ivec2(x, y-1), atlasInfo);
                    if(downVisible)
                    {
                        ++lineStart;
                    }

                }
            }
            else if(lineStart != INVALID_OFFSET)
            {
                uint writeId = offset++;
                if(!dryRun)
                {
                    uint lineEnd = y;
                    // Extend the end to handle wall segments
                    if(!middleVisible)
                    {
                        ++lineEnd;
                    }

                    outLines[writeId] = vec4(u,
                                             float(lineStart) * invHeight,
                                             u,
                                             float(lineEnd) * invHeight);
                }
                lineStart = INVALID_OFFSET;
            }
        }
    }

    return offset;
}


void main()
{
    uint tid = gl_LocalInvocationID.x;
    uint level = globals.currentLevel;
    MapAtlasLevelInfo atlasInfo = getLevelAtlasInfo(level);

    lineAllocator[tid] = evaluateY(tid, 0, atlasInfo, true)
                       + evaluateX(tid, 0, atlasInfo, true);
    barrier();

    uint offset = 0;
    for(uint i=0; i<tid; ++i)
    {
        offset += lineAllocator[i];
    }

    offset = evaluateY(tid, offset, atlasInfo, false);
    offset = evaluateX(tid, offset, atlasInfo, false);

    if(tid == (THREAD_SIZE-1))
    {
        outNumLines = offset;
    }
}


#version 460 core



/*

    So something seems wrong with seed=0, level=7, room=2
    It looks like a barrier issue, due to part of the room looking like
    it was not written completely.

    Happens on INTEL, doesn't seem to happen on NVIDIA.
    Generates correctly when captures with renderdoc.
*/

#define NUM_THREADS     64
#define MAX_PATHS       (MAX_ROOMS - 1)


layout(local_size_x=NUM_THREADS) in;


#include "../common.glsli"
#include "../map_atlas_common.glsli"


layout(set=0, binding = 0) uniform GlobalParameters_
{
    GlobalParameters globals;
}; 


writeonly layout(binding=1, r32ui) uniform uimage2D mapAtlas;


// Uses the last 23bits to construct a linear range
// [0, 1) = [0.375, 0.625)
float randomBounded0125(uint seed)
{
    // 1x shift_add
    // 1x add
    seed = 0x3e800000u + (seed & 0x7fffffu);
    return uintBitsToFloat(seed) + 0.125f;
}


struct DrawQueue
{
    ivec4   span;
};


// Split a node into two children, will return back
// the direction that was used for splitting:
//  0 = split along y
//  1 = split along x
uint bspSplit(const DrawQueue parent,
              inout DrawQueue left,
              inout DrawQueue right,
              uint randomSeed)
{
    ivec2 dims = parent.span.zw - parent.span.xy;

    // uint seed = simpleHash32(uvec3(globals.cpuRandom, it, tid));
    float splitAmount = randomBounded0125(randomSeed);

    // Randomise split direction if both width and height are equal
    // otherwise, split whichever is bigger.
    uint splitDirection = (dims.x == dims.y) 
                            ? (randomSeed >> 23) & 1u
                            : dims.x < dims.y
                                ? 1u : 0u
                            ;
    left = parent;
    right = parent;

    const int padding = 1;

    // Split across X
    if(splitDirection == 0u)
    {
        left.span.z = left.span.x + int((float(dims.x) + 0.5) * splitAmount);
        right.span.x = left.span.z;
        left.span.x += padding;
        left.span.z -= padding;
        right.span.x += padding;
        right.span.z -= padding;
    }
    // Split across Y
    else
    {
        left.span.w = left.span.y + int((float(dims.y) + 0.5) * splitAmount);
        right.span.y = left.span.w;
        left.span.y += padding;
        left.span.w -= padding;
        right.span.y += padding;
        right.span.w -= padding;
    }

    return splitDirection;
}


// We know the final texture size is never greater than
// 128x128, as such we can save a bit of SMEM by packing
// spans into a sing uint.
#define packed_span_t   uint
#define packed_bsp_t    uint

ivec4 unpackSpan(packed_span_t x)
{
    return ivec4((uvec4(x) >> ivec4(0, 8, 16, 24)) & 0xffu);
}

packed_span_t packSpan(ivec4 x)
{
    uvec4 y = uvec4(x) << ivec4(0, 8, 16, 24);
    return y.x | y.y | y.z | y.w;
}

DrawQueue unpackBspNode(packed_bsp_t x)
{
    DrawQueue y;
    y.span = unpackSpan(x);
    return y;
}

packed_bsp_t packBspNode(DrawQueue x)
{
    return packSpan(x.span);
}

shared packed_bsp_t  bspQueue[MAX_ROOMS];
shared packed_span_t pathQueue[MAX_PATHS];


// Generate the BSP and path spans for a given level, writing
// the result into bspQueue and pathQueue
void generateBsp(uint tid, MapAtlasLevelInfo atlasInfo)
{
    // Root node, which encompasses the entire level
    if(tid == 0u)
    {
        DrawQueue newQueue;
        newQueue.span = ivec4(0,
                              0,
                              atlasInfo.size.x,
                              atlasInfo.size.y);
        bspQueue[0] = packBspNode(newQueue);
    }
    barrier();

    uint tidSeed = simpleHash32(uvec3(tid, atlasInfo.offset.x, atlasInfo.offset.y));

    // Keep splitting the BSP, and adding draw commands for paths
    // that connect both sides
    for(uint it = 1u; it < MAX_ROOMS; it <<= 1)
    {
        if(tid < it)
        {
            DrawQueue parent = unpackBspNode(bspQueue[tid]);
            uint splitSeed = simpleHash32(uvec3(globals.cpuRandom, it, tidSeed));

            DrawQueue left, right;
            uint splitDirection = bspSplit(parent, left, right, splitSeed);

            // Make sure the split is valid.
            ivec2 leftDeriv = left.span.zw - left.span.xy;
            ivec2 rightDeriv = right.span.zw - right.span.xy;
            int leftArea = leftDeriv.x * leftDeriv.y;
            int rightArea = rightDeriv.x * rightDeriv.y;

            ivec4 pathSpan = ivec4(0);

            if((leftDeriv.x >= atlasInfo.minDim)
                && (leftDeriv.y >= atlasInfo.minDim)
                && (rightDeriv.x >= atlasInfo.minDim)
                && (rightDeriv.y >= atlasInfo.minDim)
                && (leftArea >= atlasInfo.minArea)
                && (rightArea >= atlasInfo.minArea))
            {

                // Write a new span
                vec2 leftCenter = vec2(left.span.xy)
                                  + vec2(leftDeriv) * 0.5
                                  + 0.5
                                  ;

                vec2 rightCenter = vec2(right.span.xy)
                                  + vec2(rightDeriv) * 0.5
                                  + 0.5
                                  ;

                vec4 path = (splitDirection == 0)
                    ? vec4(vec2(leftCenter.x, rightCenter.y), rightCenter + 1.0)
                    : vec4(leftCenter, vec2(leftCenter.x, rightCenter.y) + 1.0)
                    ;

                pathSpan = ivec4(path);

                // Swap left and right randomly, we use the bspNodes
                // index to determine which room contains the entrance
                // and exit.
                if(((splitSeed >> 24) & 1u) == 0u)
                {
                    DrawQueue tmp = left;
                    left = right;
                    right = tmp;
                }

                // Update the parents slot in the queue with the left node
                // and then create a path between the centers of the two
                // leaf nodes
                bspQueue[tid] = packBspNode(left);
            }
            else
            {
                // Leave the parents data (left node) alone, either it will be split
                // the next iteration, or it will become a leaf.
                right.span = ivec4(0, 0, 0, 0);
            }

            bspQueue[it + tid] = packBspNode(right);
            pathQueue[it + tid - 1] = packSpan(pathSpan);
        }
        barrier();
    }
}


void renderBsp(uint tid, MapAtlasLevelInfo atlasInfo)
{
    // Render paths + levels
    for(uint it = tid; it < (MAX_LEVEL_DIM_SHARED_SIZE * MAX_LEVEL_DIM_SHARED_SIZE); it += NUM_THREADS)
    {
        ivec2 localCoord = ivec2(uvec2(it % MAX_LEVEL_DIM_SHARED_SIZE, it / MAX_LEVEL_DIM_SHARED_SIZE))
                            + ivec2(MAX_LEVEL_DIM_SHARED_OFFSET);

        if(!(localCoord.x < atlasInfo.size.x && localCoord.y < atlasInfo.size.y))
        {
            continue;
        }

        uint nextSectorId = 0u;
        uint pixelId = 0u;

        for(uint i=0; i<MAX_ROOMS; ++i)
        {
            ivec4 nodeSpan = unpackBspNode(bspQueue[i]).span;
            if(nodeSpan.x == nodeSpan.z) { continue; }
            uint sectorId = ++nextSectorId;

            // Already found the room under this pixel, at this point
            // we're just counting the number of valid rooms
            if(pixelId != 0u) { continue; }

            // Ok for reasons I dont know, if I remove this, it seems to draw
            // this incorrectly, probably some missing barrier?
            // (Only happening on intel???)

            // uint lastsectorId = 2u;
            // if(sectorId == 1) { sectorId = lastsectorId; }
            // else if(sectorId == lastsectorId) { sectorId = 1u; }
            
            // Ensure the enter/exit room are reasonably far away.
            //
            // Does a reasonably good job of seperating the start
            // and end rooms.
            uint lastsectorId = 4u;
            if(sectorId == EXIT_ROOM_ID) { sectorId = lastsectorId; }
            else if(sectorId == lastsectorId) { sectorId = EXIT_ROOM_ID; }

            if(localCoord.x >= nodeSpan.x && localCoord.x < nodeSpan.z
                && localCoord.y >= nodeSpan.y && localCoord.y < nodeSpan.w)
            {
                pixelId = sectorId;
            }
        }

        for(uint i=0; i<MAX_PATHS; ++i)
        {
            ivec4 pathSpan = unpackSpan(pathQueue[i]);
            if(pathSpan.x == pathSpan.z) { continue; }

            uint sectorId = ++nextSectorId;

            if(localCoord.x >= pathSpan.x && localCoord.x < pathSpan.z
                && localCoord.y >= pathSpan.y && localCoord.y < pathSpan.w)
            {
                pixelId = (pixelId << 8) | sectorId;
            }
        }

        imageStore(mapAtlas,
                       ivec2(atlasInfo.offset + localCoord),
                       uvec4(pixelId));
    }
}


void main()
{
    uint tid = gl_LocalInvocationID.x;
    MapAtlasLevelInfo atlasInfo = getLevelAtlasInfo(gl_GlobalInvocationID.z);
    generateBsp(tid, atlasInfo);
    renderBsp(tid, atlasInfo);
}

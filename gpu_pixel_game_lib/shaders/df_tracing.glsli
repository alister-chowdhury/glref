#ifndef DF_COMMON_GLSLI
#define DF_COMMON_GLSLI

#include "bindings.glsli"
#include "map_atlas_common.glsli"

struct DFTraceResult
{
    bool    visible;
    int     numSamples;
    float   finalDist;
};

float df_sample(sampler2D dftex, vec2 ro)
{
    return textureLod(dftex, ro, 0).x;
}

vec2 df_gradient(sampler2D dftex, vec2 ro)
{
    float delta = 1.0 / ACTIVE_DF_SIZE;
    float ref = df_sample(dftex, ro);
    float dx = df_sample(dftex, ro + vec2(delta, 0)) - ref;
    float dy = df_sample(dftex, ro + vec2(0, delta)) - ref;
    return vec2(dx, dy) / delta;
}

vec2 df_pushOutOfWallVec(sampler2D dftex, vec2 ro)
{
    float delta = 1.0 / ACTIVE_DF_SIZE;
    float bias = 1.0 / ACTIVE_DF_SIZE;
    float ref = df_sample(dftex, ro);
    if(ref > bias)
    {
        return vec2(0);
    }
    float dx = df_sample(dftex, ro + vec2(delta, 0)) - ref;
    float dy = df_sample(dftex, ro + vec2(0, delta)) - ref;
    vec2 gradient = vec2(dx, dy) / delta;
    return normalize(gradient) * saturate(bias - ref);
}


vec2 df_pushOutOfWall(sampler2D dftex, vec2 ro)
{
    return ro + df_pushOutOfWallVec(dftex, ro);
}


DFTraceResult df_trace(sampler2D dftex, vec2 ro, vec2 rd, float maxDist)
{
    const int maxSteps = 128;
    float bias = 0.5 / ACTIVE_DF_SIZE;
    float dist = maxDist;

    bool visible = false;
    int i = 0;
    for(; i < maxSteps; ++i)
    {
        float d = df_sample(dftex, ro) * 0.95;
        if(d < bias)
        {
            break;
        }
        dist -= d;
        if(dist <= 0)
        {
            visible = true;
            break;
        }
        ro += rd * d;
    }

    DFTraceResult result;
    result.visible =  visible;
    result.numSamples = i;
    result.finalDist = maxDist - dist;
    return result;
}

float df_sample(vec2 ro)
{
    return df_sample(distanceFieldTexture, ro);
}

vec2 df_gradient(vec2 ro)
{
    return df_gradient(distanceFieldTexture, ro);
}

vec2 df_pushOutOfWallVec(vec2 ro)
{
    return df_pushOutOfWallVec(distanceFieldTexture, ro);
}


vec2 df_pushOutOfWall(vec2 ro)
{
    return df_pushOutOfWall(distanceFieldTexture, ro);
}


DFTraceResult df_trace(vec2 ro, vec2 rd, float maxDist)
{
    return df_trace(distanceFieldTexture, ro, rd, maxDist);
}

#endif // DF_COMMON_GLSLI
